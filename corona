#! /bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8


#pri usage of the script
print_help() 
{
    echo "Usage:    corona [-h]"
    echo "          corona [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo ""
    echo "The script filters records of people with proven coronavirus infection causing COVID-19."
    echo "If a command is also specified in the script, it executes the command over the filtered records."
    echo "If there is more logs on input, logs will be processed in entered order."
    echo ""
    echo "Command is one of:" 
    echo ""
    echo "  age                 prints stat of infected by age group,"
    echo "  countries           prints stat of infected by  foreign country,"
    echo "  daily               prints stat of infected by days of the week,"
    echo "  districts           prints stat of infected by disctrict,"
    echo "  gender              prints stat of infected by gender,"
    echo "  infected            prints stat of all infected,"
    echo "  merge               merges all logs to one, keeping the order,"
    echo "  mothly              prints stat of infected by month,"
    echo "  regions             prints stat of infected by regions,"
    echo "  yearly              prints stat of infected by year."
    echo ""
    echo "Filter can be combination of:"
    echo ""
    echo "  -a  DATETIME - after        works with logs after DATETIME"
    echo "      DATETIME is in format YYYY-MM-DD"
    echo "  -b  DATETIME - before       works with logs after DATETIME"
    echo "      DATETIME is in format YYYY-MM-DD"
    echo "  -g  GENDER                  works with logs of GENDER"
    echo "      GENDER is in format M(male)/Z(female)"
    echo "  -s  WIDTH                   sets max width of histgram"
    echo "      WIDTH is in format unsigned integer"
    echo ""
    echo "Log files:"
    echo ""
    echo "Script woks with files *.csv *.gz *.bz2"
}

#checks if DATETIME parameter is ok
check_date()
{
    x=$(echo "$1" | awk -F '-' '{
        if ($2 > 0 && $2 <= 12 && $3 > 0 && $3 <= 31)
            print "0"
        else print "1"
        }')
    if [ $x -eq 1 ] 
    then
        echo "ERROR: Invalid DATETIME."
        exit 1
    fi
}

#check if arguments were already entered
#arg 1 value of a|b|g|s
#arg 2 f[file] | c[command] 
check_if_entered()
{
    if [ "$2" = "f" -a $c -eq 1 ] ||  [ "$2" = "f" -a $LOG_COUNT -gt 0 ] || [ "$2" = "c" -a $LOG_COUNT -gt 0  ]
    then
        >&2 echo "ERROR: Wrong order of arguments."
        exit 1 
    fi
    if [ $1 -ne 0 ] 
    then
        case $2 in
            f) 
            >&2 echo "ERROR: Each filter can be applied just once."
            ;;
            c) 
            >&2 echo "ERROR: You can only use one command."
            ;;
    esac
    exit 1
    fi 
    return 0
}

#filter input based on argumets 
#if command is "merge" keep the 1st heading
filter()
{
        awk \
        -v command=$COMMAND \
        -v gender=$GENDER \
        -v a_date_time="$A_DATE_TIME" \
        -v b_date_time="$B_DATE_TIME" \
        -F ',' \
        '{
            if(command == "merge" && NR == 1) { print $0 ; next } 
            if  (gender != "")
            { 
                if ($4 != gender)
                next 
            } 
            if ($2 < a_date_time || $2 > b_date_time)
                next
            print $0
        }'
}

#takes 1 argumen = [width]
#input is data already filtered and with command applied therefore awk can split each record of data to data and number
#if width is specifically find width for each hash  
histogram_function()
{
    x=$(awk '{print}')
    if [ $s -eq 0 ] 
    then
        echo "$x" | awk '{print}'
        return
    elif [ $s -eq 2 ] 
    then
        MAXVAL=$(echo "$x" | awk -F: -v maxval=0 'END{print maxval};{ if(maxval < $2) maxval=$2}')
        WIDTH=$(($MAXVAL / $WIDTH))
        if [ $WIDTH -eq 0 ] 
        then
            >&2 echo "ERROR: Parameter [WIDTH] is too big."
            exit 1
        fi
    else
        WIDTH=$1
    fi
    echo "$x" | awk -F: -v WIDTH=$WIDTH -v last_record=$(echo "$x" | wc -l) \
    '{
        if (NR == last_record ) {next} ;
        HASHES=sprintf("%*s",$2/WIDTH,"#") ; 
        gsub(" ", "#", HASHES);
        if($2 > WIDTH)print $1": "HASHES;
        else print $1": " 
        
    }' 
}

#simple wordcount function with -l parameter for lines
infected()
{
    wc -l 
}

#count all instances of M/Z
#if histogram  ->  print HASH for every 100_000 occurrences
#if histagram with custom width -> [NEW_WIDTH] = (bigger val of)[M]or[Z]/[WIDTH] -> print HASH for every [NEW_WIDTH]
#side note: This was my first try to do the -s option. It works but it is not clean. 
#           Couldnt be replicabe for command with more variable output.
gender()
{
    awk -F ',' -v M=0 -v Z=0 -v HISTOGRAM=$s -v WIDTH=$WIDTH \
    '{if( $4 == "M" ) { M++ } if( $4 == "Z" ) { Z++ } }
    END {
        if (HISTOGRAM == 0) { print "M: "M ; print "Z: "Z} 
        else if (HISTOGRAM == 1) 
            {
                if( M != 0){ HASHES=sprintf("%*s",M/100000,"#") ; gsub(" ", "#", HASHES);print "M: "HASHES } 
                    else print "M: " 
                if( Z != 0){ HASHES=sprintf("%*s",Z/100000,"#") ; gsub(" ", "#", HASHES);print "Z: "HASHES } 
                    else print "Z: "
            }
        else if (HISTOGRAM == 2) 
            {
                if( M > Z ) { WIDTH=M/WIDTH } else { WIDTH=Z/WIDTH }
                if( M != 0){ HASHES=sprintf("%*s",M/WIDTH,"#") ; gsub(" ", "#", HASHES);print "M: "HASHES }
                    else print "M: "
                if( Z != 0){ HASHES=sprintf("%*s",Z/WIDTH,"#") ; gsub(" ", "#", HASHES);print "Z: "HASHES }
                    else print "Z: "
            }   
            }'
}

#sort input data to age group
#print output in format [age group]: [data]
#output is by default sent to histogram function 
age()
{
    awk -F ',' -v a1=0 -v a2=0 -v a3=0 -v a4=0 -v a5=0 -v a6=0 \
    -v a7=0 -v a8=0 -v a9=0 -v a10=0 -v a11=0 -v a12=0 -v none=0 \
    '{
        if ( $3 >= 0 && $3 <=5 )
            a1++
        else if ( $3 > 5 && $3 <=15 )
            a2++
        else if ( $3 > 15 && $3 <=25 )
            a3++
        else if ( $3 > 25 && $3 <=35 )
            a4++
        else if ( $3 > 35 && $3 <=45 )
            a5++
        else if ( $3 > 45 && $3 <=55 )
            a6++
        else if ( $3 > 55 && $3 <=65 )
            a7++
        else if ( $3 > 65 && $3 <=75 )
            a8++
        else if ( $3 > 75 && $3 <=85 )
            a9++
        else if ( $3 > 85 && $3 <=95 )
            a10++
        else if ( $3 > 95 && $3 <=105 )
            a11++
        else if ( $3 >105 )
            a12++
        else none++
    }
    END{
        if(a1 > 0) 
            print "0-5   : "a1
        if(a2 > 0) 
            print "6-15  : "a2
        if(a3 > 0)
            print "16-25 : "a3
        if(a4 > 0)
            print "26-35 : "a4
        if(a5 > 0)
            print "36-45 : "a5
        if(a6 > 0)
            print "46-55 : "a6
        if(a7 > 0)
            print "56-65 : "a7
        if(a8 > 0)
            print "66-75 : "a8
        if(a9 > 0)
            print "76-85 : "a9
        if(a10 > 0)
            print "86-95 : "a10
        if(a11 > 0)
            print "96-105: "a11
        if(a12 > 0)
            print ">105  : "a12
        if(none > 0)
            print "none  : "none
    }' | histogram_function 10000
}


#find not seen data - add to array - count occurences 
#print output in format [age group]: [data]
#output is by default sent to histogram function
daily()
{
    awk -F ',' $2 \
    'END{for(i in array){if( array[$2] != "") print i": "array[i]; else print "none: "array[i]}}
    { 
        if(array[$2] == "") 
            { array[$2]++; array[$2]=1} 
        else 
        {array[$2]+=1}  
    }' | sort | histogram_function 500
}

#find not seen data - add to array - count occurences 
#print output in format [age group]: [data]
#output is by default sent to histogram function
monthly()
{
    awk -F ',' '{print $2}' | \
    awk -F '-'  \
    'END{for(i in array){print i": "array[i]}}
    { 
        if(array[$1"-"$2] == "") 
        {
            array[$1"-"$2]++; array[$1"-"$2]=1
        } 
        else if( array[$1"-"$2] != "")
        {
            array[$1"-"$2]+=1
        }  
    }' | sort | histogram_function 10000
}

#find not seen data - add to array - count occurences 
#print output in format [age group]: [data]
#output is by default sent to histogram function
yearly()
{
    awk -F ',' '{print $2}' | \
    awk -F '-'  \
    'END{for(i in array){print i": "array[i]}}
    { 
        if(array[$1] == "") 
        {   
            array[$1]++; array[$1]=1
        } 
        else if( array[$1] != "")
        {
            array[$1]+=1
        }  
        }' | sort | histogram_function 100000
}

#find not seen data - add to array - count occurences 
#print output in format [age group]: [data]
#output is by default sent to histogram function
countries()
{
    awk -F ',' '{print $8}' | \
    awk -F '-'  \
    'END{for(i in array){if(i != "") print i": "array[i]}}
    { 
        if(array[$1] == "") 
        {   
            array[$1]++; array[$1]=1
        } 
        else if( array[$1] != "")
        {
            array[$1]+=1
        }  
        }' | sort | histogram_function 100
}

#find not seen data - add to array - count occurences 
#print output in format [age group]: [data]
#output is by default sent to histogram function
districts()
{
    awk -F ',' '{print $6}' | \
    awk -F '-'  \
    'END{for(i in array){if(i != "") print i": "array[i]; else print "none: "array[i]}}
    { 
        if(array[$1] == "") 
        {   
            array[$1]++; array[$1]=1
        } 
        else if( array[$1] != "")
        {
            array[$1]+=1
        }  
        }' | sort | histogram_function 1000
}

#find not seen data - add to array - count occurences 
#print output in format [age group]: [data]
#output is by default sent to histogram function
regions()
{
    awk -F ',' '{print $5}' | \
    awk -F '-'  \
    'END{for(i in array){if(i != "") print i": "array[i]; else print "none: "array[i]}}
    { 
        if(array[$1] == "") 
        {   
            array[$1]++; array[$1]=1
        } 
        else if( array[$1] != "")
        {
            array[$1]+=1
        }  
        }' | sort | histogram_function 10 000
}

#print filtered input to stdout
merge()
{
    awk '{ print }' 
}

#====================================
################MAIN#################
#====================================

#variables to check if argument was entered
a=0
b=0
g=0
s=0
c=0
#variables setup
A_DATE_TIME="0000-01-01"   #minimal valid time - by default everything should pass
B_DATE_TIME="9999-12-31"   #maximal valid time - by default everything should pass
COMMAND="merge"
WIDTH=""
GENDER=""
LOG_COUNT=0
#read arguments
while [ "$#" -gt 0 ]
do
    case $1 in
    #filters
        -a) 
            check_if_entered $a "f"
            #filter # used
            a=1
            #check if date is valid & set up variable
            check_date $2
            A_DATE_TIME=$2
            shift
            shift
        ;;
        -b) 
            check_if_entered $b "f"
            #filter # used
            b=1
            #check if date is valid & set up variable
            check_date $2
            B_DATE_TIME=$2
            shift
            shift
        ;;
        -g)
            check_if_entered $g "f"
            #filter # used
            g=1
            #check if gender is valid & set up variable
            if [ "$2" = "M" ] 
            then
                GENDER=$2
            elif [ "$2" = "Z" ] 
            then 
                GENDER=$2
            else  
                >&2 echo "ERROR: Gender argument is not valid."
                exit 1
            fi
            shift
            shift
        ;;
        -s) 
            check_if_entered $s "f"
            #filter # used
            s=1
            #check if param [WIDTH] is enered. [WIDTH] can only be a number
            if [ $2 -gt 0 -a $2 -le 1000 ]
            then
                WIDTH=$2
                s=2
                shift
            else
                echo "ERROR: Invalid WIDTH parameter entered."
            fi
            shift
        ;;
    #commands 
        gender | age | merge | infected | daily | monthly | yearly | countries | districts | regions) 
                check_if_entered $c  "c"
                ((c=1))
                COMMAND="$1"
                shift
        ;;
    #logs 
        *.csv | *.gz | *.bz2) 
                LOG_COUNT=$(($LOG_COUNT + 1))
                LOG="$LOG $1"
                shift
        ;;
    #help
        -h | --h)
                print_help
                exit 0
        ;;
    #else
        *)      
                >&2 echo "ERROR: Invalid operator."
                exit 1      
        ;;
    esac
done

#STDIN
if [ -p /dev/stdin ] 
then
    INPUT=$(cat -)
fi

#FILE NOT ENTERED, NULL 
if [ $LOG_COUNT -eq 0 -a -z "$INPUT" ]
then
    echo "id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
    exit 0
fi

#MERGE ALL INPUT
for log in $LOG
do
    case $log in
        *.csv) INPUT=$INPUT$(cat "$log")"
        " 
        ;;
        *.gz)  INPUT=$INPUT$(gzip -c -d "$log")"
        "
        ;;
        *.bz2) INPUT=$INPUT$(bzip2 -dc "$log")"
        "
        ;;
    esac
done

#PIPE INPUT THROUGH FILTER TO COMMAND (COMMAND TO histogram_function with specific [WIDTH])
echo "$INPUT" | filter | $COMMAND 